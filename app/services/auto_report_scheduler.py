import os
import re
import threading
import time
from datetime import datetime, timezone
from google import genai
from google.genai import types
from ..extensions import db
from ..models import Report


def _read_prompt_file(file_path):
    """ƒê·ªçc n·ªôi dung t·ª´ t·ªáp prompt."""
    try:
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(file_path):
            print(f"L·ªói: File kh√¥ng t·ªìn t·∫°i t·∫°i '{file_path}'")
            return None
            
        with open(file_path, 'r', encoding='utf-8') as f:
            template = f.read()
            
            # Ki·ªÉm tra n·ªôi dung template
            if not template or not isinstance(template, str):
                print(f"L·ªói: N·ªôi dung file tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá t·∫°i '{file_path}'")
                return None
            
            # ƒê·ªçc to√†n b·ªô n·ªôi dung file app/static/colors.css
            current_dir = os.path.dirname(__file__)
            colors = os.path.abspath(os.path.join(current_dir, '..','static', 'css/colors.css'))
            
            # Ki·ªÉm tra file colors.css t·ªìn t·∫°i
            if not os.path.exists(colors):
                print(f"C·∫£nh b√°o: File colors.css kh√¥ng t·ªìn t·∫°i t·∫°i '{colors}' - s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
                colors_content = ""
            else:
                try:
                    with open(colors, 'r', encoding='utf-8') as f:
                        colors_content = f.read()
                        
                        if colors_content:
                            # L·∫•y n·ªôi dung :root trong file colors.css
                            colors_match = re.search(r':root\s*{([^}]+)}', colors_content, re.DOTALL)
                            if colors_match:
                                colors_content = colors_match.group(1).strip()
                            else:
                                print("C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y n·ªôi dung :root trong file colors.css")
                                colors_content = ""
                        else:
                            colors_content = ""
                except Exception as e:
                    print(f"L·ªói khi ƒë·ªçc file colors.css: {e}")
                    colors_content = ""
                
            # Thay th·∫ø bi·∫øn trong template
            prompt = template.replace("{{ @css_root }}", colors_content)
            return prompt
            
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp prompt t·∫°i '{file_path}'")
        return None
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file '{file_path}': {e}")
        return None


def _replace_date_placeholders(prompt_text):
    """Thay th·∫ø c√°c placeholder v·ªÅ ng√†y th√°ng nƒÉm trong prompt."""
    now = datetime.now(timezone.utc)
    
    prompt_text = prompt_text.replace("<<@day>>", str(now.day))
    prompt_text = prompt_text.replace("<<@month>>", str(now.month))
    prompt_text = prompt_text.replace("<<@year>>", str(now.year))
    
    return prompt_text


def _extract_code_blocks(response_text):
    """Tr√≠ch xu·∫•t c√°c kh·ªëi m√£ ngu·ªìn (html, css, js) t·ª´ ph·∫£n h·ªìi c·ªßa Gemini."""
    # Ki·ªÉm tra input
    if not response_text or not isinstance(response_text, str):
        print("C·∫£nh b√°o: response_text l√† None ho·∫∑c kh√¥ng ph·∫£i string")
        return {
            "html": "",
            "css": "/* L·ªói: Kh√¥ng c√≥ n·ªôi dung ph·∫£n h·ªìi */",
            "js": "// L·ªói: Kh√¥ng c√≥ n·ªôi dung ph·∫£n h·ªìi"
        }
    
    html_match = re.search(r"```html(.*?)```", response_text, re.DOTALL)
    css_match = re.search(r"```css(.*?)```", response_text, re.DOTALL)
    js_match = re.search(r"```javascript(.*?)```", response_text, re.DOTALL)

    if not js_match:
        js_match = re.search(r"```js(.*?)```", response_text, re.DOTALL)

    return {
        "html": html_match.group(1).strip() if html_match else "",
        "css": css_match.group(1).strip() if css_match else "/* L·ªói: Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c CSS */",
        "js": js_match.group(1).strip() if js_match else "// L·ªói: Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c JS"
    }


def _extract_part_a_content(full_report):
    """Tr√≠ch xu·∫•t n·ªôi dung PH·∫¶N A: N·ªòI DUNG B√ÅO C√ÅO t·ª´ b√°o c√°o ƒë·∫ßy ƒë·ªß."""
    # Ki·ªÉm tra input
    if not full_report or not isinstance(full_report, str):
        print("C·∫£nh b√°o: full_report l√† None ho·∫∑c kh√¥ng ph·∫£i string")
        return ""
    
    # T√¨m ph·∫ßn b·∫Øt ƒë·∫ßu c·ªßa PH·∫¶N A
    part_a_start = re.search(r"##\s*üìë\s*PH·∫¶N A.*?N·ªòI DUNG B√ÅO C√ÅO", full_report, re.IGNORECASE | re.DOTALL)
    if not part_a_start:
        # Fallback: t√¨m pattern kh√°c
        part_a_start = re.search(r"PH·∫¶N A.*?N·ªòI DUNG B√ÅO C√ÅO", full_report, re.IGNORECASE | re.DOTALL)
    
    if not part_a_start:
        print("C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y PH·∫¶N A trong b√°o c√°o")
        return full_report
    
    # T√¨m ph·∫ßn k·∫øt th√∫c (b·∫Øt ƒë·∫ßu c·ªßa verification section)
    verification_start = re.search(r"##\s*üîç\s*PH·∫¶N B.*?C∆† CH·∫æ KI·ªÇM TRA", full_report, re.IGNORECASE | re.DOTALL)
    if not verification_start:
        # Fallback patterns
        verification_patterns = [
            r"PH·∫¶N B.*?C∆† CH·∫æ KI·ªÇM TRA",
            r"B·∫£ng ƒê·ªëi chi·∫øu D·ªØ li·ªáu",
            r"Data Verification Table",
            r"K·∫æT QU·∫¢ KI·ªÇM TRA"
        ]
        for pattern in verification_patterns:
            verification_start = re.search(pattern, full_report, re.IGNORECASE | re.DOTALL)
            if verification_start:
                break
    
    if verification_start:
        # Tr√≠ch xu·∫•t t·ª´ ƒë·∫ßu PH·∫¶N A ƒë·∫øn tr∆∞·ªõc ph·∫ßn verification
        return full_report[part_a_start.start():verification_start.start()].strip()
    else:
        # N·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn verification, l·∫•y t·ª´ PH·∫¶N A ƒë·∫øn cu·ªëi
        return full_report[part_a_start.start():].strip()


def _check_report_validation(report_text):
    """
    Ki·ªÉm tra k·∫øt qu·∫£ validation c·ªßa b√°o c√°o.
    
    Returns:
        str: 'PASS', 'FAIL', ho·∫∑c 'UNKNOWN'
    """
    # Ki·ªÉm tra input
    if not report_text or not isinstance(report_text, str):
        print("C·∫£nh b√°o: report_text l√† None ho·∫∑c kh√¥ng ph·∫£i string")
        return 'UNKNOWN'
    
    # T√¨m k·∫øt qu·∫£ ki·ªÉm tra cu·ªëi c√πng
    pass_pattern = re.search(r"K·∫æT QU·∫¢ KI·ªÇM TRA:\s*PASS", report_text, re.IGNORECASE)
    fail_pattern = re.search(r"K·∫æT QU·∫¢ KI·ªÇM TRA:\s*FAIL", report_text, re.IGNORECASE)
    
    if pass_pattern:
        return 'PASS'
    elif fail_pattern:
        return 'FAIL'
    else:
        return 'UNKNOWN'


def generate_auto_research_report(api_key, max_attempts=3):
    """
    H√†m t·ª± ƒë·ªông t·∫°o b√°o c√°o nghi√™n c·ª©u s√¢u v·ªõi c∆° ch·∫ø validation v√† retry.
    
    Args:
        api_key (str): API key c·ªßa Gemini
        max_attempts (int): S·ªë l·∫ßn th·ª≠ t·ªëi ƒëa ƒë·ªÉ t·∫°o b√°o c√°o PASS
        
    Returns:
        bool: True n·∫øu t·∫°o b√°o c√°o th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        print(f"[{datetime.now()}] B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o t·ª± ƒë·ªông...")
        
        # Ki·ªÉm tra API key
        if not api_key or not isinstance(api_key, str):
            print("L·ªói: API key kh√¥ng h·ª£p l·ªá")
            return False
        
        # ƒê∆∞·ªùng d·∫´n t·ªõi c√°c prompt files
        current_dir = os.path.dirname(__file__)
        deep_research_prompt_path = os.path.abspath(
            os.path.join(current_dir, '..', '..', 'create_report', 'prompt_deep_research_report.md')
        )
        create_report_prompt_path = os.path.abspath(
            os.path.join(current_dir, '..', '..', 'create_report', 'prompt_create_report.md')
        )
        
        print(f"Deep research prompt path: {deep_research_prompt_path}")
        print(f"Create report prompt path: {create_report_prompt_path}")
        
        # B∆∞·ªõc 1: ƒê·ªçc prompt deep research v√† thay th·∫ø ng√†y th√°ng
        deep_research_prompt = _read_prompt_file(deep_research_prompt_path)
        if deep_research_prompt is None:
            print("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc prompt deep research")
            return False
            
        deep_research_prompt = _replace_date_placeholders(deep_research_prompt)
        
        # C·∫•u h√¨nh Gemini
        try:
            client = genai.Client(api_key=api_key)
            model = "gemini-2.5-pro"
            print("ƒê√£ kh·ªüi t·∫°o Gemini client th√†nh c√¥ng")
        except Exception as e:
            print(f"L·ªói khi kh·ªüi t·∫°o Gemini client: {e}")
            return False
        
        # C·∫•u h√¨nh tools v√† thinking mode
        tools = [
            types.Tool(googleSearch=types.GoogleSearch()),
        ]
        generate_content_config = types.GenerateContentConfig(
            thinking_config=types.ThinkingConfig(
                thinking_budget=-1,
            ),
            tools=tools,
        )
        
        # B∆∞·ªõc 2: V√≤ng l·∫∑p t·∫°o b√°o c√°o nghi√™n c·ª©u s√¢u v·ªõi validation
        report_content = None
        full_report_text = None
        
        for attempt in range(1, max_attempts + 1):
            print(f"ƒêang t·∫°o b√°o c√°o nghi√™n c·ª©u s√¢u (l·∫ßn th·ª≠ {attempt}/{max_attempts})...")
            
            try:
                # T·∫°o request content v·ªõi Google Search tools
                contents = [
                    types.Content(
                        role="user",
                        parts=[
                            types.Part.from_text(text=deep_research_prompt),
                        ],
                    ),
                ]
                
                response = client.models.generate_content(
                    model=model,
                    contents=contents,
                    config=generate_content_config
                )
                
                # Ki·ªÉm tra response
                if not response or not hasattr(response, 'text'):
                    print(f"L·∫ßn th·ª≠ {attempt}: Response kh√¥ng h·ª£p l·ªá t·ª´ AI")
                    continue
                    
                full_report_text = response.text
                
                # Ki·ªÉm tra n·ªôi dung response
                if not full_report_text or not isinstance(full_report_text, str):
                    print(f"L·∫ßn th·ª≠ {attempt}: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung b√°o c√°o t·ª´ AI ho·∫∑c kh√¥ng ph·∫£i string")
                    continue
                
                # Ki·ªÉm tra validation
                validation_result = _check_report_validation(full_report_text)
                print(f"L·∫ßn th·ª≠ {attempt}: K·∫øt qu·∫£ validation = {validation_result}")
                
                if validation_result == 'PASS':
                    # Tr√≠ch xu·∫•t PH·∫¶N A: N·ªòI DUNG B√ÅO C√ÅO
                    report_content = _extract_part_a_content(full_report_text)
                    print(f"L·∫ßn th·ª≠ {attempt}: B√°o c√°o PASS - ƒê√£ tr√≠ch xu·∫•t PH·∫¶N A")
                    break
                elif validation_result == 'FAIL':
                    print(f"L·∫ßn th·ª≠ {attempt}: B√°o c√°o FAIL - Th·ª≠ l·∫°i...")
                    continue
                else:
                    print(f"L·∫ßn th·ª≠ {attempt}: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ validation - Th·ª≠ l·∫°i...")
                    continue
                    
            except Exception as e:
                print(f"L·∫ßn th·ª≠ {attempt}: L·ªói khi g·ªçi AI: {e}")
                continue
        
        # Ki·ªÉm tra k·∫øt qu·∫£ sau v√≤ng l·∫∑p
        if not report_content:
            print(f"L·ªói: Kh√¥ng th·ªÉ t·∫°o b√°o c√°o PASS sau {max_attempts} l·∫ßn th·ª≠")
            return False
            
        print("Ho√†n th√†nh t·∫°o b√°o c√°o nghi√™n c·ª©u s√¢u v·ªõi validation PASS")
        
        # B∆∞·ªõc 3: ƒê·ªçc prompt t·∫°o giao di·ªán
        # B∆∞·ªõc 3: ƒê·ªçc prompt t·∫°o giao di·ªán
        create_report_prompt = _read_prompt_file(create_report_prompt_path)
        if create_report_prompt is None:
            print("L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc prompt t·∫°o giao di·ªán")
            return False
            
        # B∆∞·ªõc 4: G·ªçi Gemini ƒë·ªÉ t·∫°o giao di·ªán t·ª´ b√°o c√°o nghi√™n c·ª©u (ch·ªâ PH·∫¶N A)
        full_request = f"{create_report_prompt}\n\n---\n\n**N·ªòI DUNG B√ÅO C√ÅO C·∫¶N X·ª¨ L√ù:**\n\n{report_content}"
        
        print("ƒêang t·∫°o giao di·ªán b√°o c√°o...")
        
        # T·∫°o request content cho giao di·ªán (kh√¥ng c·∫ßn Google Search cho ph·∫ßn n√†y)
        interface_contents = [
            types.Content(
                role="user",
                parts=[
                    types.Part.from_text(text=full_request),
                ],
            ),
        ]
        
        interface_response = client.models.generate_content(
            model=model,
            contents=interface_contents
        )
        
        # Ki·ªÉm tra interface response
        if not interface_response or not hasattr(interface_response, 'text'):
            print("L·ªói: Interface response kh√¥ng h·ª£p l·ªá t·ª´ AI")
            return False
            
        if not interface_response.text or not isinstance(interface_response.text, str):
            print("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung interface t·ª´ AI ho·∫∑c kh√¥ng ph·∫£i string")
            return False
        
        # B∆∞·ªõc 5: Tr√≠ch xu·∫•t c√°c kh·ªëi m√£
        code_blocks = _extract_code_blocks(interface_response.text)
        
        if not code_blocks or not code_blocks.get("html"):
            print("L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t m√£ HTML t·ª´ ph·∫£n h·ªìi AI")
            return False
            
        print("Ho√†n th√†nh t·∫°o giao di·ªán b√°o c√°o")
        
        # B∆∞·ªõc 6: T·∫°o b√°o c√°o m·ªõi v√† l∆∞u v√†o database
        new_report = Report(
            html_content=code_blocks.get("html", ""),
            css_content=code_blocks.get("css", ""),
            js_content=code_blocks.get("js", "")
        )
        
        db.session.add(new_report)
        db.session.commit()
        
        print(f"[{datetime.now()}] T·∫°o b√°o c√°o t·ª± ƒë·ªông th√†nh c√¥ng! ID: {new_report.id}")
        return True
        
    except Exception as e:
        print(f"[{datetime.now()}] L·ªói khi t·∫°o b√°o c√°o t·ª± ƒë·ªông: {e}")
        if 'db' in locals():
            db.session.rollback()
        return False


def schedule_auto_report(app, api_key, interval_hours=6):
    """
    L√™n l·ªãch t·ª± ƒë·ªông t·∫°o b√°o c√°o m·ªói interval_hours gi·ªù.
    
    Args:
        app: Flask app instance
        api_key (str): API key c·ªßa Gemini
        interval_hours (int): Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn t·∫°o b√°o c√°o (gi·ªù)
    """
    def run_scheduler():
        with app.app_context():
            while True:
                try:
                    # Ch·∫°y t·∫°o b√°o c√°o v·ªõi s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
                    max_attempts = int(os.getenv('MAX_REPORT_ATTEMPTS', '3'))
                    success = generate_auto_research_report(api_key, max_attempts)
                    if success:
                        print(f"[{datetime.now()}] Scheduler: B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                    else:
                        print(f"[{datetime.now()}] Scheduler: T·∫°o b√°o c√°o th·∫•t b·∫°i")
                        
                except Exception as e:
                    print(f"[{datetime.now()}] Scheduler error: {e}")
                
                # Ch·ªù interval_hours gi·ªù tr∆∞·ªõc khi ch·∫°y l·∫ßn ti·∫øp theo
                time.sleep(interval_hours * 3600)
    
    # T·∫°o v√† kh·ªüi ƒë·ªông thread cho scheduler
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    print(f"[{datetime.now()}] Auto report scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông (m·ªói {interval_hours} gi·ªù)")


def start_auto_report_scheduler(app):
    """
    Kh·ªüi ƒë·ªông scheduler t·ª± ƒë·ªông t·∫°o b√°o c√°o.
    H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông.
    
    Args:
        app: Flask app instance
    """
    # L·∫•y API key t·ª´ environment variables
    api_key = os.getenv('GEMINI_API_KEY')
    
    if not api_key:
        print("WARNING: GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. Auto report scheduler kh√¥ng ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")
        return False
    
    # Ki·ªÉm tra n·∫øu ƒëang ch·∫°y tr√™n m√¥i tr∆∞·ªùng production ho·∫∑c c√≥ enable scheduler
    enable_scheduler = os.getenv('ENABLE_AUTO_REPORT_SCHEDULER', 'false').lower() == 'true'
    
    if enable_scheduler:
        # L·∫•y interval t·ª´ environment variable, m·∫∑c ƒë·ªãnh l√† 3 gi·ªù
        interval_hours = int(os.getenv('AUTO_REPORT_INTERVAL_HOURS', '3'))
        schedule_auto_report(app, api_key, interval_hours)
        return True
    else:
        print("INFO: Auto report scheduler ch∆∞a ƒë∆∞·ª£c b·∫≠t. Thi·∫øt l·∫≠p ENABLE_AUTO_REPORT_SCHEDULER=true ƒë·ªÉ b·∫≠t.")
        return False
