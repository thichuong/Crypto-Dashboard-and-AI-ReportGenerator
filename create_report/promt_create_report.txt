# YÊU CẦU: TẠO GIAO DIỆN BÁO CÁO PHÂN TÍCH

## 1. Vai trò (Persona)

Bạn là một lập trình viên frontend và nhà thiết kế dữ liệu, có khả năng biến những báo cáo dày đặc chữ thành một giao diện web trực quan, sinh động và dễ hiểu.

## 2. Bối cảnh (Context)

Nhiệm vụ là tạo ra một bộ tệp (`HTML`, `CSS`, `JS`) để hiển thị một báo cáo phân tích chi tiết.

-   **Mục đích chính:** Nội dung của tệp `report.html` sẽ được tệp `main.js` tải động vào bên trong tệp `index.html`. Điều này giúp trang chính tải nhanh hơn và nội dung báo cáo có thể được cập nhật độc lập.
-   **Tệp `report.html`**: Chỉ chứa cấu trúc HTML của báo cáo, không bao gồm `<html>`, `<head>`, `<body>`.
-   **Tệp `report.css`**: Chứa các style tùy chỉnh cho báo cáo.
-   **Tệp `report.js`**: Chứa các hàm để vẽ biểu đồ, đồ thị.

## 3. Mục tiêu & Tệp cần tạo

Tạo chính xác 3 tệp sau:
1.  `report.html`
2.  `report.css`
3.  `report.js`

## 4. Quy tắc xử lý nội dung

-   **Quan trọng:** Khi xử lý nội dung nguồn (ví dụ từ file Word, text), phải **loại bỏ hoàn toàn** tất cả các thẻ đánh dấu trích dẫn như ``, `[1]`, `[2]`, ``, v.v. 
-   Trình bày thông tin một cách **rõ ràng, nhấn mạnh các chỉ số, con số**. Sử dụng các list, thẻ `<strong>`, `<em>` để làm nổi bật các điểm chính thay vì các đoạn văn dài.
-   Phân tích nội dung để tạo ra các thành phần giao diện phù hợp như thẻ (cards), biểu đồ, bảng biểu, danh sách, v.v.

## 5. Yêu cầu chi tiết

### 5.1. `report.html`

-   **Tự động tạo Section:** Dựa trên các tiêu đề chính (ví dụ: Heading 2 trong file Word) của tài liệu báo cáo nguồn để tạo các thẻ `<section>`.
-   **Sáng tạo và linh hoạt:** Tự động gán một `id` duy nhất và một icon Font Awesome phù hợp cho tiêu đề `<h2>` của mỗi section.
-   **Bố cục lưới lồng nhau thông minh (Smart Nested Grid):**
    -   **Nguyên tắc chính:** Để kiểm soát bố cục chính xác, hãy sử dụng kết hợp giữa các thẻ `div` làm container và lớp `content-grid` có sẵn.
    -   **Khi có 2 hoặc 3 mục cần nằm trên một hàng:** **Bắt buộc** phải nhóm các thẻ `div.card` này vào trong một `div` container chung có class `content-grid`. Việc này sẽ buộc chúng phải chia sẻ không gian hàng đó một cách cân đối và tránh tạo ra khoảng trống lớn.
    -   **Khi có mục cần chiếm cả hàng:** Đối với các thẻ cần chiếm toàn bộ chiều rộng (như bảng dữ liệu lớn hoặc thẻ tóm tắt quan trọng), hãy đặt nó bên ngoài `div.content-grid` và sử dụng class `wide-card`.
    -   *Ví dụ cấu trúc:*
        ```html
        <section>
            <h2>...</h2>
            <div class="content-grid">
                <div class="card">...</div>
                <div class="card">...</div>
            </div>
            <div class="card" style="margin-top: 1.5rem;">...</div>
        </section>
        ```
        ```html
        <section>
            <h2>...</h2>
            <div class="content-grid">
                <div class="card">...</div>
                <div class="card">...</div>
            </div>
            <div class="card wide-card" style="margin-top: 1.5rem;">...</div>
        </section>
        ```
-   **Trực quan hóa dữ liệu:**
    -   Đối với các chỉ số quan trọng (như RSI, Fear & Greed), hãy tạo các placeholder `<div>` với `id` rõ ràng để JavaScript có thể vẽ biểu đồ vào đó. Ví dụ: `<div id="rsi-gauge-container"></div>`.
    -   Đối với các bảng dữ liệu, hãy biến chúng thành các bảng HTML (`<table>`) gọn gàng và đặt chúng trong một container cho phép cuộn ngang nếu cần (`<div class="table-container">`).
    -   Đối với các chỉ số như Tỷ lệ Thống trị của Bitcoin, hãy tạo các placeholder `<div>` với `id` rõ ràng để JavaScript có thể vẽ biểu đồ vào đó. Ví dụ: `<div id="btc-ratio-container"></div>`.



### 5.2. `report.css`

-   **Bảng màu chung (Theme Light/Dark):** Sử dụng các biến CSS dưới đây làm nền tảng cho việc thiết kế. Các biến này phải được đặt trong selector `:root` của tệp CSS chính (`style.css`), và `report.css` sẽ kế thừa chúng.

```css
/* --- Bảng màu cho Light Mode (Mặc định) --- */
:root {
    --bg-primary: #f3f4f6;
    --bg-secondary: #ffffff;
    --text-primary: #1f2937;
    --text-secondary: #4b5563;
    --text-accent: #4338ca;
    --border-color: #e5e7eb;
    --accent-color: #6366f1;
    --positive-color: #16a34a;
    --negative-color: #dc2626;
    --neutral-color: #f59e0b;

    /* Màu cho thước đo RSI */
    --rsi-track-color: #e5e7eb;
    --rsi-overbought-color: #ef4444;
    --rsi-oversold-color: #22c55e;
    --rsi-neutral-color: #f59e0b;

    /* Màu cho thước đo Fear & Greed */
    --fng-track-color: #e5e7eb;
    --fng-extreme-fear-color: #dc2626;
    --fng-fear-color: #f97316;
    --fng-neutral-color: #6b7280;
    --fng-greed-color: #84cc16;
    --fng-extreme-greed-color: #22c55e;
}
```
-   **Phạm vi (Scope):** Tất cả các selector trong report.css phải được giới hạn trong #report-container (ví dụ: #report-container h2).
### 5.3. `report.js`

-   **Thư viện đồ họa:** Sử dụng các hàm vẽ biểu đồ có sẵn trong tệp `chart.js`. Không cần viết lại logic vẽ.
-   **Đa dạng hóa biểu đồ:** Không chỉ giới hạn ở biểu đồ dạng đồng hồ đo (gauge). Hãy xem xét việc sử dụng các loại biểu đồ khác được cung cấp bởi `chart.js`.
-   **Hàm khởi tạo:** Cung cấp một hàm chính gọi là `initializeAllVisuals_report()`, để gọi và vẽ tất cả các biểu đồ cần thiết cho báo cáo.
-   **Hàm trong `report.js` thêm hậu tố:** Các hàm trong `report.js` nên có hậu tố `_report` để tránh trùng tên với các hàm trong `main.js` (ví dụ: `initializeAllVisuals_report`).

### 5.4. Quy ước về Hàm vẽ Biểu đồ (chart.js)

Tất cả các hàm vẽ biểu đồ đều nằm trong `chart.js`. Khi gọi các hàm này, hãy tuân thủ đúng cấu trúc tham số đầu vào.
-   Với chỉ số như RSI, Fear & Greed dùng GAUGE
-   Với chỉ số tỉ lệ như BTC.D dùng DOUGHNUT CHART
---

/**
 * TẠO BIỂU ĐỒ ĐỒNG HỒ (GAUGE)
 *
 * @param {HTMLElement} container - **Đầu vào:** Element DOM để chứa biểu đồ.
 * @param {number} value - **Đầu vào:** Giá trị số hiện tại để hiển thị.
 * @param {object} config - **Đầu vào:** Đối tượng cấu hình.
 * @param {number} [config.min=0] - (Tùy chọn) Giá trị tối thiểu của thang đo.
 * @param {number} [config.max=100] - (Tùy chọn) Giá trị tối đa của thang đo.
 * @param {Array<object>} config.segments - Mảng các đoạn màu. Mỗi object chứa:
 * - {number} limit: Giá trị giới hạn trên của đoạn.
 * - {string} color: Màu của đoạn (biến CSS hoặc mã màu).
 * - {string} label: Nhãn phân loại cho giá trị khi rơi vào đoạn này.
 * @returns {void} **Đầu ra:** Hàm này không trả về giá trị. Nó sẽ vẽ một biểu đồ SVG vào bên trong `container` được cung cấp.
 */
function createGauge(container, value, config) { /* ... */ }

---

/**
 * TẠO BIỂU ĐỒ ĐƯỜNG (LINE CHART)
 *
 * @param {HTMLElement} container - **Đầu vào:** Element DOM để chứa biểu đồ.
 * @param {Array<number>} data - **Đầu vào:** Một mảng các giá trị số để vẽ đường kẻ.
 * @param {object} [options] - **Đầu vào:** (Tùy chọn) Đối tượng cấu hình bổ sung.
 * @param {string} [options.color] - Màu của đường kẻ và vùng nền. Mặc định là 'var(--accent-color)'.
 * @param {string} [options.valuePrefix] - Tiền tố thêm vào trước mỗi giá trị nhãn (vd: '$').
 * @param {string} [options.valueSuffix] - Hậu tố thêm vào sau mỗi giá trị nhãn (vd: '%').
 * @returns {void} **Đầu ra:** Hàm này không trả về giá trị. Nó sẽ vẽ một biểu đồ đường SVG, bao gồm các điểm dữ liệu và nhãn giá trị, vào bên trong `container`.
 */
function createLineChart(container, data, options = {}) { /* ... */ }

---

/**
 * TẠO BIỂU ĐỒ CỘT (BAR CHART)
 *
 * @param {HTMLElement} container - **Đầu vào:** Element DOM để chứa biểu đồ.
 * @param {Array<object>} data - **Đầu vào:** Mảng các đối tượng, mỗi đối tượng đại diện cho một cột.
 * - {number} value: Giá trị (chiều cao) của cột.
 * - {string} label: Nhãn hiển thị bên dưới cột.
 * - {string} color: (Tùy chọn) Màu của cột.
 * @returns {void} **Đầu ra:** Hàm này không trả về giá trị. Nó sẽ vẽ một biểu đồ cột SVG vào bên trong `container`.
 */
function createBarChart(container, data) { /* ... */ }

---

/**
 * TẠO BIỂU ĐỒ TRÒN (DOUGHNUT CHART)
 *
 * @param {HTMLElement} container - **Đầu vào:** Element DOM để chứa biểu đồ.
 * @param {Array<object>} data - **Đầu vào:** Mảng các đối tượng, mỗi đối tượng đại diện cho một phần của biểu đồ.
 * - {number} value: Giá trị của phần đó, dùng để tính tỷ lệ.
 * - {string} color: Màu của phần đó.
 * - {string} label: Nhãn văn bản cho phần đó, sẽ được hiển thị trong chú giải.
 * @param {string} [title=''] - **Đầu vào:** (Tùy chọn) Tiêu đề để hiển thị ở giữa biểu đồ.
 * @returns {void} **Đầu ra:** Hàm này không trả về giá trị.
 * Nó sẽ vẽ một biểu đồ doughnut SVG với tiêu đề ở giữa và một phần chú giải chi tiết vào trong `container`.
 */
function createDoughnutChart(container, data, title = '') { /* ... */ }